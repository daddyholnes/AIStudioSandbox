Implementing WebSocket-Based Collaboration in PodPlaiStudio
Looking at your AIStudioSandbox GitHub repository and the screenshots of your environment variables, I can see you already have a GEMINI_API_KEY configured. Here's a comprehensive implementation plan for creating a Replit-like experience using Gemini API without relying on LiveKit.

Environment Variable Fixes
Your code is looking for GOOGLE_AI_API_KEY but you have GEMINI_API_KEY in your environment. Let's fix this inconsistency:

javascript
// @copilot Update all environment variable references in config.ts:
// Replace this:
export const GOOGLE_API_KEY = process.env.GOOGLE_AI_API_KEY || "";

// With this:
export const GOOGLE_API_KEY = process.env.GEMINI_API_KEY || "";
// Also add this line for backward compatibility:
process.env.GOOGLE_AI_API_KEY = process.env.GEMINI_API_KEY;
Fix Message Format for Google API
javascript
// @copilot Fix message format for Google API in your service:
// Replace this:
const messages = messages.map(msg => ({
  role: msg.role,
  parts: msg.content
}));

// With this:
const messages = messages.map(msg => ({
  role: msg.role === "assistant" ? "model" : msg.role,
  parts: Array.isArray(msg.content) 
    ? msg.content.map(part => ({ text: part.text })) 
    : [{ text: msg.content }]
}));
WebSocket-Based Room Implementation
javascript
// @copilot Create a new file: server/services/WebSocketRooms.js
import { v4 as uuidv4 } from 'uuid';

export class WebSocketRoomManager {
  constructor() {
    this.rooms = new Map();
    this.clients = new Map();
  }

  // Create or join a room
  joinRoom(ws, roomId, username = 'Anonymous') {
    // Generate a room ID if not provided
    const actualRoomId = roomId || `room_${Date.now()}_${uuidv4().substring(0, 8)}`;
    
    // Create the room if it doesn't exist
    if (!this.rooms.has(actualRoomId)) {
      this.rooms.set(actualRoomId, new Set());
    }
    
    // Add client to room
    this.rooms.get(actualRoomId).add(ws.clientId);
    
    // Store client info
    this.clients.set(ws.clientId, {
      ws,
      roomId: actualRoomId,
      username,
      joinedAt: new Date(),
      status: 'active'
    });
    
    // Notify all clients in the room
    this.broadcastToRoom(actualRoomId, {
      type: 'room_update',
      roomId: actualRoomId,
      participants: this.getRoomParticipants(actualRoomId),
      event: 'joined',
      username
    });
    
    return actualRoomId;
  }
  
  // Leave a room
  leaveRoom(ws) {
    const clientInfo = this.clients.get(ws.clientId);
    if (!clientInfo) return false;
    
    const { roomId, username } = clientInfo;
    
    // Remove client from room
    if (this.rooms.has(roomId)) {
      this.rooms.get(roomId).delete(ws.clientId);
      
      // Delete room if empty
      if (this.rooms.get(roomId).size === 0) {
        this.rooms.delete(roomId);
      } else {
        // Notify remaining participants
        this.broadcastToRoom(roomId, {
          type: 'room_update',
          roomId,
          participants: this.getRoomParticipants(roomId),
          event: 'left',
          username
        });
      }
    }
    
    // Remove client info
    this.clients.delete(ws.clientId);
    
    return true;
  }
  
  // Get all participants in a room
  getRoomParticipants(roomId) {
    if (!this.rooms.has(roomId)) return [];
    
    return Array.from(this.rooms.get(roomId))
      .map(clientId => {
        const clientInfo = this.clients.get(clientId);
        return {
          id: clientId,
          username: clientInfo?.username || 'Unknown',
          status: clientInfo?.status || 'offline',
          joinedAt: clientInfo?.joinedAt
        };
      });
  }
  
  // Broadcast a message to all clients in a room
  broadcastToRoom(roomId, message) {
    if (!this.rooms.has(roomId)) return 0;
    
    let sentCount = 0;
    const messageStr = JSON.stringify(message);
    
    for (const clientId of this.rooms.get(roomId)) {
      const clientInfo = this.clients.get(clientId);
      
      if (clientInfo && clientInfo.ws.readyState === 1) { // WebSocket.OPEN
        try {
          clientInfo.ws.send(messageStr);
          sentCount++;
        } catch (error) {
          console.error(`Error sending message to client ${clientId}:`, error);
        }
      }
    }
    
    return sentCount;
  }
  
  // Update client status (active, typing, idle, etc.)
  updateClientStatus(ws, status) {
    const clientInfo = this.clients.get(ws.clientId);
    if (!clientInfo) return false;
    
    // Update status
    clientInfo.status = status;
    this.clients.set(ws.clientId, clientInfo);
    
    // Notify room participants
    this.broadcastToRoom(clientInfo.roomId, {
      type: 'status_update',
      roomId: clientInfo.roomId,
      participants: this.getRoomParticipants(clientInfo.roomId)
    });
    
    return true;
  }
}
Integrating WebSocket Rooms in Server Routes
javascript
// @copilot Update server/routes.ts to integrate WebSocketRooms:
import { WebSocketRoomManager } from './services/WebSocketRooms';

// Create room manager instance
const roomManager = new WebSocketRoomManager();

// In your WebSocket connection handler:
wss.on('connection', (ws, req) => {
  // Existing code...
  
  ws.on('message', async (message) => {
    try {
      const data = JSON.parse(message.toString());
      
      // Handle room management messages
      switch (data.type) {
        case "join_room": {
          const { roomId, username } = data;
          const actualRoomId = roomManager.joinRoom(ws, roomId, username);
          
          ws.send(JSON.stringify({
            type: 'room_joined',
            roomId: actualRoomId,
            participants: roomManager.getRoomParticipants(actualRoomId)
          }));
          break;
        }
        
        case "leave_room": {
          roomManager.leaveRoom(ws);
          ws.send(JSON.stringify({ type: 'room_left' }));
          break;
        }
        
        case "update_status": {
          roomManager.updateClientStatus(ws, data.status);
          break;
        }
        
        case "room_message": {
          const clientInfo = roomManager.clients.get(ws.clientId);
          if (clientInfo) {
            roomManager.broadcastToRoom(clientInfo.roomId, {
              type: 'room_message',
              sender: clientInfo.username,
              senderId: ws.clientId,
              message: data.message,
              timestamp: new Date()
            });
          }
          break;
        }
        
        // Other message handlers...
      }
    } catch (error) {
      // Error handling...
    }
  });
  
  // Handle disconnection
  ws.on('close', () => {
    roomManager.leaveRoom(ws);
  });
});
Terminal Session Fix
javascript
// @copilot Fix the terminal session in App.jsx:
import { useState, useEffect } from 'react';

// Inside your App component:
const [terminalSession, setTerminalSession] = useState(null);

useEffect(() => {
  const initTerminal = async () => {
    try {
      const session = await createTerminalSession();
      setTerminalSession(session);
    } catch (error) {
      console.error("Failed to create terminal session:", error);
    }
  };
  
  initTerminal();
  
  return () => {
    if (terminalSession) {
      terminateSession(terminalSession);
    }
  };
}, []);
WebSocket-Based Collaboration UI Component
javascript
// @copilot Create a client/src/components/CollaborationPanel.jsx:
import React, { useState, useEffect } from 'react';
import { useWebSocket } from '@/hooks/use-websocket';

export default function CollaborationPanel() {
  const [roomId, setRoomId] = useState('');
  const [username, setUsername] = useState('User_' + Math.floor(Math.random() * 10000));
  const [joined, setJoined] = useState(false);
  const [participants, setParticipants] = useState([]);
  const [messages, setMessages] = useState([]);
  const [messageText, setMessageText] = useState('');
  const { socket, status, sendMessage } = useWebSocket();
  
  useEffect(() => {
    if (!socket || status !== 'open') return;
    
    const handleMessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        
        switch (data.type) {
          case 'room_joined':
            setRoomId(data.roomId);
            setParticipants(data.participants);
            setJoined(true);
            break;
            
          case 'room_update':
            setParticipants(data.participants);
            setMessages(prev => [...prev, {
              type: 'system',
              text: `${data.username} ${data.event} the room`,
              timestamp: new Date()
            }]);
            break;
            
          case 'room_message':
            setMessages(prev => [...prev, {
              type: 'user',
              sender: data.sender,
              senderId: data.senderId,
              text: data.message,
              timestamp: new Date(data.timestamp)
            }]);
            break;
            
          case 'room_left':
            setJoined(false);
            setParticipants([]);
            setMessages([]);
            break;
        }
      } catch (error) {
        console.error('Error handling WebSocket message:', error);
      }
    };
    
    socket.addEventListener('message', handleMessage);
    
    return () => {
      socket.removeEventListener('message', handleMessage);
    };
  }, [socket, status]);
  
  const joinRoom = () => {
    if (!socket || status !== 'open') return;
    
    sendMessage(JSON.stringify({
      type: 'join_room',
      roomId: roomId || undefined,
      username
    }));
  };
  
  const leaveRoom = () => {
    if (!socket || status !== 'open') return;
    
    sendMessage(JSON.stringify({
      type: 'leave_room'
    }));
  };
  
  const sendChatMessage = () => {
    if (!messageText.trim() || !socket || status !== 'open') return;
    
    sendMessage(JSON.stringify({
      type: 'room_message',
      message: messageText
    }));
    
    setMessageText('');
  };
  
  if (!joined) {
    return (
      <div className="p-4">
        <h2 className="text-lg font-medium mb-4">Create or Join Room</h2>
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium mb-1">Your Name</label>
            <input
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              placeholder="Enter your name"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Room ID (optional)</label>
            <input
              type="text"
              value={roomId}
              onChange={(e) => setRoomId(e.target.value)}
              className="w-full px-3 py-2 border rounded"
              placeholder="Leave empty to create a new room"
            />
          </div>
          <button
            onClick={joinRoom}
            className="w-full bg-primary text-white py-2 rounded"
          >
            {roomId ? 'Join Room' : 'Create Room'}
          </button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="flex flex-col h-full">
      <div className="p-4 border-b">
        <div className="flex justify-between items-center">
          <h2 className="text-lg font-medium">Room: {roomId}</h2>
          <button
            onClick={leaveRoom}
            className="bg-red-500 text-white px-3 py-1 rounded"
          >
            Leave
          </button>
        </div>
      </div>
      
      <div className="flex-grow flex overflow-hidden">
        <div className="flex-grow p-4 overflow-y-auto">
          <div className="space-y-4">
            {messages.map((msg, idx) => (
              <div key={idx} className={`p-3 rounded-lg ${
                msg.type === 'system' 
                  ? 'bg-neutral-100 text-neutral-600' 
                  : msg.senderId === socket.clientId
                    ? 'bg-primary text-white ml-auto'
                    : 'bg-neutral-200 text-neutral-800'
              } max-w-3/4 ${msg.type !== 'system' && msg.senderId === socket.clientId ? 'ml-auto' : ''}`}>
                {msg.type !== 'system' && (
                  <div className="text-xs font-medium mb-1">{msg.sender}</div>
                )}
                <div>{msg.text}</div>
              </div>
            ))}
          </div>
        </div>
        
        <div className="w-48 border-l p-4 overflow-y-auto bg-neutral-50">
          <h3 className="font-medium mb-2">Participants ({participants.length})</h3>
          <ul className="space-y-2">
            {participants.map((p) => (
              <li key={p.id} className="flex items-center">
                <span className={`w-2 h-2 rounded-full mr-2 ${
                  p.status === 'active' ? 'bg-green-500' : 'bg-neutral-400'
                }`}></span>
                {p.username}
              </li>
            ))}
          </ul>
        </div>
      </div>
      
      <div className="p-4 border-t">
        <div className="flex">
          <input
            type="text"
            value={messageText}
            onChange={(e) => setMessageText(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && sendChatMessage()}
            className="flex-grow px-3 py-2 border rounded-l"
            placeholder="Type a message..."
          />
          <button
            onClick={sendChatMessage}
            className="bg-primary text-white px-4 py-2 rounded-r"
          >
            Send
          </button>
        </div>
      </div>
    </div>
  );
}